(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{429:function(t,r,a){"use strict";a.r(r);var e=a(3),s=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" ----")]),t._v(" "),a("p",[a("s",[t._v("使用数组能简易转化为完全二叉堆,")])]),t._v(" "),a("p",[a("s",[t._v("对于二项式堆, 斐波那契堆, 非完全二叉堆, 数组不方便模拟")])]),t._v(" "),a("p",[a("s",[t._v("(非连续的稀疏数组,在遍历时不可避免去遍历 empty 项)")])]),t._v(" "),a("p",[a("s",[t._v("需要使用 "),a("code",[t._v("class heap {}")]),t._v(" 、 "),a("code",[t._v("class heapNode {}")]),t._v(" 实现堆结构")])]),t._v(" "),a("h3",{attrs:{id:"如何创建优先队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何创建优先队列"}},[t._v("#")]),t._v(" 如何创建优先队列")]),t._v(" "),a("ul",[a("li",[t._v("创建 heap 时, 将 comparator 设置为可注入的, 能够方便的拓展 comparator 方法")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/trekhleb/javascript-algorithms/blob/master/src/data-structures/priority-queue/PriorityQueue.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("trekhleb/javascript-algorithms"),a("OutboundLink")],1),t._v(" 中, 对 comparator、 pairsInRightOrder 进行了两层抽象, 分别可以设置 对比器, 最大最小顺序, 此处创建带权重的优先队列, 在 comparator 中, 对权重进行比较, 即完成优先对目的. 此算法中要求 item 不能重复")])])}),[],!1,null,null,null);r.default=s.exports}}]);